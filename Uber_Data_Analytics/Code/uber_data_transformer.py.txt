if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
import pandas as pd
import gc

def transform(df, *args, **kwargs):
    # Optimize datetime conversion
    df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
    df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])
    df = df.drop_duplicates().reset_index(drop=True)
    df = df.head(10000)
    df['trip_id'] = df.index
    # Creating the Data Time Dimention Table.
    datetime_dim = df.loc[:,('tpep_pickup_datetime','tpep_dropoff_datetime')]
    datetime_dim['Pick_Hour'] = datetime_dim['tpep_pickup_datetime'].dt.hour
    datetime_dim['Pick_Day'] = datetime_dim['tpep_pickup_datetime'].dt.day
    datetime_dim['Pick_Month'] = datetime_dim['tpep_pickup_datetime'].dt.month
    datetime_dim['Pick_Year'] = datetime_dim['tpep_pickup_datetime'].dt.year
    datetime_dim['Pick_Weekday'] = datetime_dim['tpep_pickup_datetime'].dt.weekday
    datetime_dim['Drop_Hour'] = datetime_dim['tpep_dropoff_datetime'].dt.hour
    datetime_dim['Drop_Day'] = datetime_dim['tpep_dropoff_datetime'].dt.day
    datetime_dim['Drop_Month'] = datetime_dim['tpep_dropoff_datetime'].dt.month
    datetime_dim['Drop_Year'] = datetime_dim['tpep_dropoff_datetime'].dt.year
    datetime_dim['Drop_Weekday'] = datetime_dim['tpep_dropoff_datetime'].dt.weekday
    datetime_dim['Date_Time_ID'] = datetime_dim.index
    # Arranging the columns properly.
    datetime_dim = datetime_dim[['Date_Time_ID', 'tpep_pickup_datetime', 'Pick_Hour',
        'Pick_Day', 'Pick_Month', 'Pick_Year', 'Pick_Weekday', 'tpep_dropoff_datetime', 'Drop_Hour',
        'Drop_Day', 'Drop_Month', 'Drop_Year', 'Drop_Weekday', ]]
    
    passenger_count_dim =df.loc[:,['passenger_count']]
    passenger_count_dim['Passenger_Count_ID'] = passenger_count_dim.index
    passenger_count_dim = passenger_count_dim[['Passenger_Count_ID','passenger_count']]
    
    trip_distance_dim =df.loc[:,['trip_distance']]
    trip_distance_dim['trip_distance_ID'] = trip_distance_dim.index
    trip_distance_dim = trip_distance_dim[['trip_distance_ID','trip_distance']]
    
    pickup_location_dim = df.loc[:,('pickup_longitude','pickup_latitude')]
    pickup_location_dim['pickup_location_ID'] = pickup_location_dim.index
    pickup_location_dim = pickup_location_dim[['pickup_location_ID','pickup_longitude','pickup_latitude']]
    
    dropoff_location_dim = df.loc[:,('dropoff_longitude','dropoff_latitude')]
    dropoff_location_dim['dropoff_location_ID'] = dropoff_location_dim.index
    dropoff_location_dim = dropoff_location_dim[['dropoff_location_ID','dropoff_longitude','dropoff_latitude']]

    rate_code_type={1:"Standard rate",
               2:"JFK",
               3:"Newark",
               4:"Nassau or Westchester",
               5:"Negotiated fare",
               6:"Group ride"}

    rate_code_dim = pd.DataFrame(list(rate_code_type.items()), columns=['RatecodeID', 'Ratecode_Name'])
    rate_code_dim=rate_code_dim[['RatecodeID', 'Ratecode_Name']]
    payment_type={1: "Credit card",
             2:"Cash",
             3:"No Charge",
             4:"Dispute",
             5:"Unknown",
             6:"Voided trip"}

    payment_type_dim=pd.DataFrame(list(payment_type.items()),columns=['payment_type','payment_type_name'])
    payment_type_dim = payment_type_dim[['payment_type','payment_type_name']]
    
    fact_table = df.merge(passenger_count_dim, left_on='trip_id', right_on='Passenger_Count_ID') \
             .merge(trip_distance_dim, left_on='trip_id', right_on='trip_distance_ID') \
             .merge(pickup_location_dim, left_on='trip_id', right_on='pickup_location_ID') \
             .merge(dropoff_location_dim, left_on='trip_id', right_on='dropoff_location_ID')\
             .merge(datetime_dim, left_on='trip_id', right_on='Date_Time_ID') \
             [['trip_id','VendorID', 'Date_Time_ID', 'Passenger_Count_ID',
               'trip_distance_ID', 'RatecodeID', 'store_and_fwd_flag', 'pickup_location_ID', 'dropoff_location_ID',
               'payment_type', 'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',
               'improvement_surcharge', 'total_amount']]

    # Output (column-wise dictionary format)
    result = {
        "datetime_dim": datetime_dim.to_dict(orient="dict"),
        "passenger_count_dim": passenger_count_dim.to_dict(orient="dict"),
        "trip_distance_dim": trip_distance_dim.to_dict(orient="dict"),
        "rate_code_dim": rate_code_dim.to_dict(orient="dict"),
        "pickup_location_dim": pickup_location_dim.to_dict(orient="dict"),
        "dropoff_location_dim": dropoff_location_dim.to_dict(orient="dict"),
        "payment_type_dim": payment_type_dim.to_dict(orient="dict"),
        "fact_table": fact_table.to_dict(orient="dict")
    }

    # Clean memory
    del df, datetime_dim, passenger_count_dim, trip_distance_dim
    del pickup_location_dim, dropoff_location_dim, rate_code_dim, payment_type_dim, fact_table
    gc.collect()

    return result



@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'